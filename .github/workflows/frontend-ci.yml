name: Deploy Frontend → S3 + CloudFront

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-northeast-2   # CF는 global이지만 S3/자격증명에 필요

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      BUCKET: ${{ secrets.S3_BUCKET_NAME }}
      # 선택: DIST_ID를 비워두거나 "auto" 로 두면 자동 탐지
      DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install deps
        working-directory: frontend
        run: npm ci

      - name: Build
        working-directory: frontend
        env:
          CI: "false"
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: npm run build

      - name: Detect build output directory
        id: detect
        shell: bash
        run: |
          set -e
          CANDIDATES=(frontend/dist frontend/build frontend/out)
          for d in "${CANDIDATES[@]}"; do
            if [ -d "$d" ]; then
              echo "BUILD_DIR=$d" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo "❌ No known build dir found"; ls -la frontend; exit 1

      - name: Show build dir
        run: |
          echo "Using BUILD_DIR=${BUILD_DIR}"
          ls -la "${BUILD_DIR}"

      - name: Configure AWS credentials (Static Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I? (debug)
        run: aws sts get-caller-identity

      - name: Sync to S3 (delete removed files)
        run: |
          aws s3 sync "${BUILD_DIR}" "s3://${BUCKET}/" \
            --delete --exclude ".DS_Store" --exclude "*.map" --only-show-errors

      - name: Set no-cache for index.html
        run: |
          aws s3 cp "s3://${BUCKET}/index.html" "s3://${BUCKET}/index.html" \
            --metadata-directive REPLACE \
            --cache-control "no-store" \
            --content-type "text/html" \
            --only-show-errors

      - name: Long-cache for hashed assets
        shell: bash
        run: |
          shopt -s globstar nullglob
          for ext in js css svg png jpg jpeg webp woff woff2 ttf; do
            for f in "${BUILD_DIR}"/**/*.${ext}; do
              key="${f#${BUILD_DIR}/}"
              aws s3 cp "$f" "s3://${BUCKET}/${key}" \
                --metadata-directive REPLACE \
                --cache-control "public, max-age=31536000, immutable" \
                --only-show-errors
            done
          done

      # ✅ CloudFront 배포 ID 자동 탐지 (S3 원본 매칭)
      - name: Resolve CloudFront distribution
        id: cf
        shell: bash
        run: |
          set -e
          if [ -n "${DIST_ID}" ] && [ "${DIST_ID}" != "auto" ]; then
            echo "Using preset DIST_ID=${DIST_ID}"
          else
            ORIG_DN="${BUCKET}.s3.${AWS_REGION}.amazonaws.com"
            echo "Searching CF distribution by origin: ${ORIG_DN}"
            DID=$(aws cloudfront list-distributions \
              --query "DistributionList.Items[?contains(Origins.Items[].DomainName, \`${ORIG_DN}\`)].Id | [0]" \
              --output text)
            if [ -z "$DID" ] || [ "$DID" = "None" ]; then
              echo "❌ Could not find CloudFront distribution for origin ${ORIG_DN}"
              echo "Available distributions (Id / Domain / FirstOrigin):"
              aws cloudfront list-distributions \
                --query "DistributionList.Items[].{Id:Id,Domain:DomainName,Origin:Origins.Items[0].DomainName}" \
                --output table || true
              exit 1
            fi
            echo "DIST_ID=$DID" >> $GITHUB_ENV
            DIST_ID="$DID"
          fi
          DOMAIN=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Id=='${DIST_ID}'].DomainName | [0]" --output text)
          echo "CF_DOMAIN=$DOMAIN" >> $GITHUB_ENV
          echo "Resolved: DIST_ID=${DIST_ID}, DOMAIN=${DOMAIN}"

      - name: Invalidate CloudFront (index + root)
        run: |
          aws cloudfront create-invalidation --distribution-id "${DIST_ID}" --paths "/index.html" "/"

      - name: Wait invalidation & smoke test
        shell: bash
        run: |
          set -e
          ID=$(aws cloudfront list-invalidations --distribution-id "${DIST_ID}" \
               --query 'InvalidationList.Items[0].Id' --output text)
          until [ "$(aws cloudfront get-invalidation --distribution-id "${DIST_ID}" --id "$ID" \
                    --query 'Invalidation.Status' --output text)" = "Completed" ]; do
            sleep 5
          done
          code=$(curl -s -o /dev/null -w "%{http_code}" "https://${CF_DOMAIN}/")
          echo "HTTP $code"
          test "$code" -eq 200
