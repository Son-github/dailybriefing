name: Deploy Frontend ‚Üí S3 + CloudFront

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-northeast-2   # CFÎäî Í∏ÄÎ°úÎ≤åÏù¥ÏßÄÎßå S3/ÏûêÍ≤©Ï¶ùÎ™ÖÏö© Î¶¨Ï†Ñ

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      BUCKET: ${{ secrets.S3_BUCKET_NAME }}
      # ÎπÑÏõåÎëêÍ±∞ÎÇò "auto"Î©¥ ÏûêÎèô ÌÉêÏßÄÎê®
      DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install deps
        working-directory: frontend
        run: npm ci

      - name: Build
        working-directory: frontend
        env:
          CI: "false"
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: npm run build

      # üîé ÎπåÎìú ÏÇ∞Ï∂úÎ¨º ÏûêÎèô ÌÉêÏßÄ (Vite/CRA/Next.js Í≥µÌÜµ)
      - name: Detect build output directory
        id: detect
        shell: bash
        run: |
          set -e
          CANDIDATES=(frontend/dist frontend/build frontend/out)
          for d in "${CANDIDATES[@]}"; do
            if [ -d "$d" ]; then
              echo "Found build dir: $d"
              echo "BUILD_DIR=$d" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo "‚ùå No known build dir found. Listing frontend/:"; ls -la frontend; exit 1

      - name: Show build dir
        run: |
          echo "Using BUILD_DIR=${BUILD_DIR}"
          ls -la "${BUILD_DIR}"

      - name: Configure AWS credentials (Static Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I? (debug)
        run: aws sts get-caller-identity

      - name: Sync to S3 (delete removed files)
        run: |
          aws s3 sync "${BUILD_DIR}" "s3://${BUCKET}/" \
            --delete --exclude ".DS_Store" --exclude "*.map" --only-show-errors

      - name: Set no-cache for index.html
        run: |
          aws s3 cp "s3://${BUCKET}/index.html" "s3://${BUCKET}/index.html" \
            --metadata-directive REPLACE \
            --cache-control "no-store" \
            --content-type "text/html" \
            --only-show-errors

      - name: Long-cache for hashed assets
        shell: bash
        run: |
          shopt -s globstar nullglob
          for ext in js css svg png jpg jpeg webp woff woff2 ttf; do
            for f in "${BUILD_DIR}"/**/*.${ext}; do
              key="${f#${BUILD_DIR}/}"
              aws s3 cp "$f" "s3://${BUCKET}/${key}" \
                --metadata-directive REPLACE \
                --cache-control "public, max-age=31536000, immutable" \
                --only-show-errors
            done
          done

      # ‚úÖ CloudFront Î∞∞Ìè¨ ID Í≤ÄÏ¶ù / ÏûêÎèô ÌÉêÏßÄ (S3 ÏõêÎ≥∏ Í∏∞Î∞ò)
      - name: Resolve CloudFront distribution (verify or auto-detect)
        id: cf
        shell: bash
        run: |
          set -e
          echo "Input DIST_ID='${DIST_ID}'  BUCKET='${BUCKET}'  AWS_REGION='${AWS_REGION}'"

          # 0) preset DIST_IDÍ∞Ä Ïú†Ìö®ÌïòÎ©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
          if [ -n "${DIST_ID}" ] && [ "${DIST_ID}" != "auto" ]; then
            if aws cloudfront get-distribution --id "${DIST_ID}" >/dev/null 2>&1; then
              DOMAIN=$(aws cloudfront get-distribution --id "${DIST_ID}" --query 'Distribution.DomainName' --output text)
              echo "Preset DIST_ID is valid: ${DIST_ID} (${DOMAIN})"
              echo "CF_DOMAIN=${DOMAIN}" >> $GITHUB_ENV
              exit 0
            else
              echo "Preset DIST_ID='${DIST_ID}' is invalid (NoSuchDistribution). Will auto-detect."
            fi
          fi

          # 1) ÏõêÎ≥∏ ÎèÑÎ©îÏù∏ ÌõÑÎ≥¥ (OAC/Ï†ïÏ†Å ÏÇ¨Ïù¥Ìä∏ Î™®Îì† ÏºÄÏù¥Ïä§ Ïª§Î≤Ñ)
          ORIGIN_CANDIDATES=(
            "${BUCKET}.s3.${AWS_REGION}.amazonaws.com"
            "${BUCKET}.s3.amazonaws.com"
            "${BUCKET}.s3-website.${AWS_REGION}.amazonaws.com"
            "${BUCKET}.s3-website-${AWS_REGION}.amazonaws.com"
          )

          for ORIG in "${ORIGIN_CANDIDATES[@]}"; do
            echo "Searching by origin: ${ORIG}"
            DID=$(aws cloudfront list-distributions \
              --query "DistributionList.Items[?contains(Origins.Items[].DomainName, \`${ORIG}\`)].Id | [0]" \
              --output text)
            if [ -n "$DID" ] && [ "$DID" != "None" ]; then
              DOMAIN=$(aws cloudfront get-distribution --id "$DID" --query 'Distribution.DomainName' --output text)
              echo "Found distribution: ${DID} (${DOMAIN}) via origin ${ORIG}"
              echo "DIST_ID=$DID" >> $GITHUB_ENV
              echo "CF_DOMAIN=$DOMAIN" >> $GITHUB_ENV
              exit 0
            fi
          done

          echo "‚ùå Could not resolve CloudFront distribution for bucket='${BUCKET}' in account $(aws sts get-caller-identity --query Account --output text)."
          echo "Available distributions (Id / Domain / Origins):"
          aws cloudfront list-distributions \
            --query "DistributionList.Items[].{Id:Id,Domain:DomainName,Origins:join(', ', Origins.Items[].DomainName)}" \
            --output table || true
          exit 1

      - name: Invalidate CloudFront (index + root)
        shell: bash
        run: |
          set -e
          test -n "${DIST_ID}" || { echo "DIST_ID is empty"; exit 1; }
          aws cloudfront create-invalidation --distribution-id "${DIST_ID}" --paths "/index.html" "/"

      - name: Wait invalidation & smoke test
        shell: bash
        run: |
          set -e
          test -n "${DIST_ID}" || { echo "DIST_ID is empty"; exit 1; }
          INV_ID=$(aws cloudfront list-invalidations --distribution-id "${DIST_ID}" \
                   --query 'InvalidationList.Items[0].Id' --output text)
          until [ "$(aws cloudfront get-invalidation --distribution-id "${DIST_ID}" --id "$INV_ID" \
                    --query 'Invalidation.Status' --output text)" = "Completed" ]; do
            sleep 5
          done
          if [ -z "${CF_DOMAIN}" ] || [ "${CF_DOMAIN}" = "None" ]; then
            CF_DOMAIN=$(aws cloudfront get-distribution --id "${DIST_ID}" --query 'Distribution.DomainName' --output text)
          fi
          code=$(curl -s -o /dev/null -w "%{http_code}" "https://${CF_DOMAIN}/")
          echo "HTTP $code from https://${CF_DOMAIN}/"
          test "$code" -eq 200
          
