name: Backend CI/CD → ECR + ECS

on:
  push:
    branches: [ "main" ]
    paths:
      - "backend/*-service/**"
      - "!backend/news-service/sentiment/**"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    paths:
      - "backend/*-service/**"
      - "!backend/news-service/sentiment/**"
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  PROJECT: dailybriefing

permissions:
  contents: read

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: auth-service
            path: backend/auth-service
            port: 8081
          - service: exchange-service
            path: backend/exchange-service
            port: 8082
          - service: news-service
            path: backend/news-service/backend
            port: 8084
          - service: weather-service
            path: backend/weather-service
            port: 8083

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # 🔐 Static Keys (OIDC 미사용)
      - name: Configure AWS credentials (Static Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I? (debug)
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists + keep only 1 image
        env:
          REPO: ${{ env.PROJECT }}/${{ matrix.service }}
        run: |
          set -e
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$REPO" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
          aws ecr put-lifecycle-policy \
            --repository-name "$REPO" \
            --lifecycle-policy-text '{
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "keep only the most recent image",
                  "selection": {
                    "tagStatus": "any",
                    "countType": "imageCountMoreThan",
                    "countNumber": 1
                  },
                  "action": { "type": "expire" }
                }
              ]
            }'

      # ⛳ Gradle 빌드
      - name: Build (Gradle)
        run: |
          ls -al "${{ matrix.path }}"
          if [ -f "${{ matrix.path }}/gradlew" ]; then
            chmod +x "${{ matrix.path }}/gradlew"
            (cd "${{ matrix.path }}" && ./gradlew clean build -x test --no-daemon)
          else
            gradle -p "${{ matrix.path }}" clean build -x test --no-daemon
          fi

      # 🐳 Docker Build & Push
      - name: Build & Push Docker image
        id: bp
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.path }}
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT }}/${{ matrix.service }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT }}/${{ matrix.service }}:latest

      # 🚀 Deploy to ECS
      - name: Resolve image and names
        id: vars
        env:
          REG: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "image=${REG}/${{ env.PROJECT }}/${{ matrix.service }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "service=${{ matrix.service }}" >> $GITHUB_OUTPUT
          echo "cluster=${{ secrets.ECS_CLUSTER }}" >> $GITHUB_OUTPUT

      - name: Fetch current task definition (from service)
        id: current
        run: |
          set -e
          TD_ARN=$(aws ecs describe-services \
            --cluster "${{ steps.vars.outputs.cluster }}" \
            --services "${{ steps.vars.outputs.service }}" \
            --query 'services[0].taskDefinition' --output text || echo "")
          if [ -z "$TD_ARN" ] || [ "$TD_ARN" = "None" ]; then
            echo "❌ No such ECS service: ${{ steps.vars.outputs.service }}"
            exit 1
          fi
          echo "td_arn=$TD_ARN" >> $GITHUB_OUTPUT
          aws ecs describe-task-definition --task-definition "$TD_ARN" \
            --query 'taskDefinition' > td.json

      - name: Patch image in task definition JSON
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          jq --arg NAME "${{ steps.vars.outputs.service }}" \
             --arg IMG  "${{ steps.vars.outputs.image }}" \
             '
             .containerDefinitions |= map(if .name==$NAME then .image=$IMG else . end)
             | del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)
             ' td.json > td.new.json
          cat td.new.json | jq '.containerDefinitions[] | {name,image}'

      - name: Register new task definition
        id: reg
        run: |
          NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://td.new.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "td_arn=$NEW_TD_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service (rolling)
        run: |
          aws ecs update-service \
            --cluster "${{ steps.vars.outputs.cluster }}" \
            --service "${{ steps.vars.outputs.service }}" \
            --task-definition "${{ steps.reg.outputs.td_arn }}" \
            --force-new-deployment

      # ✅ 스마트 웨이터: ALB 헬스 + 롤아웃 상태 모니터링 (기본 20분)
      - name: Wait until service & ALB healthy (smart waiter)
        shell: bash
        run: |
          set -euo pipefail
          CL="${{ steps.vars.outputs.cluster }}"
          SV="${{ steps.vars.outputs.service }}"
          MAX_MINUTES=20
          SLEEP=15
          LOOPS=$(( (MAX_MINUTES*60)/SLEEP ))

          # 연결된 Target Group
          TG=$(aws ecs describe-services --cluster "$CL" --services "$SV" --query 'services[0].loadBalancers[0].targetGroupArn' --output text)
          echo "TargetGroup: $TG"

          for (( i=1; i<=LOOPS; i++ )); do
            SVC_JSON=$(aws ecs describe-services --cluster "$CL" --services "$SV")
            RUN=$(echo "$SVC_JSON"  | jq -r '.services[0].runningCount')
            DES=$(echo "$SVC_JSON"  | jq -r '.services[0].desiredCount')
            ROLL=$(echo "$SVC_JSON" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .rolloutState' || echo "UNKNOWN")

            HEALTH_OK=true
            if [ "$TG" != "None" ]; then
              STATES=$(aws elbv2 describe-target-health --target-group-arn "$TG" --query 'TargetHealthDescriptions[].TargetHealth.State' --output text || true)
              for st in $STATES; do
                if [ "$st" != "healthy" ]; then HEALTH_OK=false; fi
              done
            fi

            echo "[$i/$LOOPS] rollout=$ROLL running=$RUN desired=$DES health=$HEALTH_OK"
            if [ "$ROLL" = "COMPLETED" ] && [ "$RUN" -eq "$DES" ] && [ "$HEALTH_OK" = true ]; then
              echo "✅ Service is stable and healthy."
              exit 0
            fi
            sleep "$SLEEP"
          done

          echo "❌ Service did not become healthy within ${MAX_MINUTES}m. Dumping diagnostics..."
          aws ecs describe-services --cluster "$CL" --services "$SV" \
            --query 'services[0].events[0:10].[createdAt,message]'
          if [ "$TG" != "None" ]; then
            aws elbv2 describe-target-health --target-group-arn "$TG" \
              --query 'TargetHealthDescriptions[].{Id:Target.Id,State:TargetHealth.State,Reason:TargetHealth.Reason,Desc:TargetHealth.Description}'
          fi
          exit 1


